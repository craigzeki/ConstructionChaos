//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""00a52e39-1420-434b-8768-7ad4f2c5f414"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e8c178ad-30da-4663-bb9e-86fdbd3cb925"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.3)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GrabRightHand"",
                    ""type"": ""Button"",
                    ""id"": ""132e1d01-2b35-4ff9-88db-0198b150e8f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GrabLeftHand"",
                    ""type"": ""Button"",
                    ""id"": ""0048f944-df22-432a-bb8d-33439e72bd6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovePlayer"",
                    ""type"": ""Value"",
                    ""id"": ""cb3175b7-4e19-424b-9e7b-f315eb56d2f9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Collapse"",
                    ""type"": ""Value"",
                    ""id"": ""f334b699-bef2-4bb3-934e-d887210cb18b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""AxisDeadzone(min=0.5)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseMoveArms"",
                    ""type"": ""Value"",
                    ""id"": ""5b9eea89-01c9-4cc8-82b3-01bad613bd65"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StickMoveArms"",
                    ""type"": ""Value"",
                    ""id"": ""77e01d5f-233d-43ef-94d9-710cd9028a44"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8be2c92-e77d-4ac1-b264-f0e4538467ee"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""656465d9-cbc3-49ca-8032-4d571d0dc951"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9568d3b9-6866-411c-9c98-d09bf6807685"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""GrabRightHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ac62e15-0070-47c6-9c78-fc4366959df9"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""GrabRightHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18362d53-c9e4-4edf-83d6-af6a64e65960"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrabLeftHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b94e250-3924-40f4-8d8d-d429de720707"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""GrabLeftHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""KeyboardHorizontalAxis"",
                    ""id"": ""f5c069fb-d14d-4f49-9e35-39a06d977438"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3bb4fbd2-bf7b-4a88-b33a-75180d236e58"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e9654e16-7159-4459-9e0f-74bd82526256"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""700ed2b1-f37a-4ea8-bc9e-4c800cb4aed5"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcae8924-06b9-4c22-9efe-72e9e11d921c"",
                    ""path"": ""<Gamepad>/dpad/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""KeyboardVerticalAxis"",
                    ""id"": ""47ee8128-fb3d-4802-946c-1ce74cd323c4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Collapse"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""481dcf73-c4a4-4514-87e7-2e83fcd7dd4a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Collapse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""12c091ff-a8d7-4089-90d0-178388dace33"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""Collapse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7c700430-37a9-46be-921c-d26fe5727a71"",
                    ""path"": ""<Gamepad>/dpad/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Collapse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a03fb498-5d2d-4807-8293-83902ca185ac"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Collapse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a039373f-3842-461e-a6d3-09e3cb1194e8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""MouseMoveArms"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cc1b6f2-cc8d-4dbe-8e12-3594f8bdefe7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StickMoveArms"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""2740559f-e910-4a32-ad62-ec322931ac87"",
            ""actions"": [
                {
                    ""name"": ""DoIt"",
                    ""type"": ""Button"",
                    ""id"": ""69ddf5f9-a48d-4d16-80aa-4f0bd1018c57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7899d9f8-5cb2-45fb-a829-6eb2760e08b5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DoIt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87ae829b-400b-499d-8e0f-d276e24504e8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard+Mouse"",
                    ""action"": ""DoIt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard+Mouse"",
            ""bindingGroup"": ""Keyboard+Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Jump = m_Gameplay.FindAction("Jump", throwIfNotFound: true);
        m_Gameplay_GrabRightHand = m_Gameplay.FindAction("GrabRightHand", throwIfNotFound: true);
        m_Gameplay_GrabLeftHand = m_Gameplay.FindAction("GrabLeftHand", throwIfNotFound: true);
        m_Gameplay_MovePlayer = m_Gameplay.FindAction("MovePlayer", throwIfNotFound: true);
        m_Gameplay_Collapse = m_Gameplay.FindAction("Collapse", throwIfNotFound: true);
        m_Gameplay_MouseMoveArms = m_Gameplay.FindAction("MouseMoveArms", throwIfNotFound: true);
        m_Gameplay_StickMoveArms = m_Gameplay.FindAction("StickMoveArms", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_DoIt = m_Menu.FindAction("DoIt", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Jump;
    private readonly InputAction m_Gameplay_GrabRightHand;
    private readonly InputAction m_Gameplay_GrabLeftHand;
    private readonly InputAction m_Gameplay_MovePlayer;
    private readonly InputAction m_Gameplay_Collapse;
    private readonly InputAction m_Gameplay_MouseMoveArms;
    private readonly InputAction m_Gameplay_StickMoveArms;
    public struct GameplayActions
    {
        private @Controls m_Wrapper;
        public GameplayActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Gameplay_Jump;
        public InputAction @GrabRightHand => m_Wrapper.m_Gameplay_GrabRightHand;
        public InputAction @GrabLeftHand => m_Wrapper.m_Gameplay_GrabLeftHand;
        public InputAction @MovePlayer => m_Wrapper.m_Gameplay_MovePlayer;
        public InputAction @Collapse => m_Wrapper.m_Gameplay_Collapse;
        public InputAction @MouseMoveArms => m_Wrapper.m_Gameplay_MouseMoveArms;
        public InputAction @StickMoveArms => m_Wrapper.m_Gameplay_StickMoveArms;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnJump;
                @GrabRightHand.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGrabRightHand;
                @GrabRightHand.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGrabRightHand;
                @GrabRightHand.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGrabRightHand;
                @GrabLeftHand.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGrabLeftHand;
                @GrabLeftHand.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGrabLeftHand;
                @GrabLeftHand.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGrabLeftHand;
                @MovePlayer.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovePlayer;
                @MovePlayer.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovePlayer;
                @MovePlayer.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovePlayer;
                @Collapse.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCollapse;
                @Collapse.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCollapse;
                @Collapse.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCollapse;
                @MouseMoveArms.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMouseMoveArms;
                @MouseMoveArms.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMouseMoveArms;
                @MouseMoveArms.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMouseMoveArms;
                @StickMoveArms.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnStickMoveArms;
                @StickMoveArms.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnStickMoveArms;
                @StickMoveArms.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnStickMoveArms;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @GrabRightHand.started += instance.OnGrabRightHand;
                @GrabRightHand.performed += instance.OnGrabRightHand;
                @GrabRightHand.canceled += instance.OnGrabRightHand;
                @GrabLeftHand.started += instance.OnGrabLeftHand;
                @GrabLeftHand.performed += instance.OnGrabLeftHand;
                @GrabLeftHand.canceled += instance.OnGrabLeftHand;
                @MovePlayer.started += instance.OnMovePlayer;
                @MovePlayer.performed += instance.OnMovePlayer;
                @MovePlayer.canceled += instance.OnMovePlayer;
                @Collapse.started += instance.OnCollapse;
                @Collapse.performed += instance.OnCollapse;
                @Collapse.canceled += instance.OnCollapse;
                @MouseMoveArms.started += instance.OnMouseMoveArms;
                @MouseMoveArms.performed += instance.OnMouseMoveArms;
                @MouseMoveArms.canceled += instance.OnMouseMoveArms;
                @StickMoveArms.started += instance.OnStickMoveArms;
                @StickMoveArms.performed += instance.OnStickMoveArms;
                @StickMoveArms.canceled += instance.OnStickMoveArms;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_DoIt;
    public struct MenuActions
    {
        private @Controls m_Wrapper;
        public MenuActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DoIt => m_Wrapper.m_Menu_DoIt;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @DoIt.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnDoIt;
                @DoIt.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnDoIt;
                @DoIt.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnDoIt;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DoIt.started += instance.OnDoIt;
                @DoIt.performed += instance.OnDoIt;
                @DoIt.canceled += instance.OnDoIt;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard+Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnGrabRightHand(InputAction.CallbackContext context);
        void OnGrabLeftHand(InputAction.CallbackContext context);
        void OnMovePlayer(InputAction.CallbackContext context);
        void OnCollapse(InputAction.CallbackContext context);
        void OnMouseMoveArms(InputAction.CallbackContext context);
        void OnStickMoveArms(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnDoIt(InputAction.CallbackContext context);
    }
}
